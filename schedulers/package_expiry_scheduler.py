import asyncio
from datetime import timedelta

import pytz
import schedule
from sqlalchemy import and_

from common.enums.service_package_enum import ServicePackage
from config import get_db_session
from helper import force_log, DateUtils
from models.chat_model import Chat
from models.group_package_model import GroupPackage
from services.telegram_standard_bot_service import TelegramBotService


class PackageExpiryScheduler:
    def __init__(self, standard_bot_service: TelegramBotService, business_bot_service=None, admin_bot_service=None):
        self.standard_bot_service = standard_bot_service
        self.business_bot_service = business_bot_service
        self.admin_bot_service = admin_bot_service
        self.admin_group_id = -4907090942  # Admin group chat ID

    async def notify_expiring_packages(self):
        """
        Find groups with packages expiring in 3 days and send notifications to the groups.
        """
        force_log("Package Expiry Scheduler - Checking for packages expiring in 3 days", "PackageExpiryScheduler")
        try:
            with get_db_session() as session:
                # Calculate the date 3 days from now in Cambodia timezone
                three_days_from_now = DateUtils.now() + timedelta(days=3)
                # Get start and end of that day for comparison
                # expiry_date_start = three_days_from_now.replace(hour=0, minute=0, second=0, microsecond=0)
                expiry_date_end = three_days_from_now.replace(hour=23, minute=59, second=59, microsecond=999999)

                # Find packages that expire in exactly 3 days (paid packages only)
                expiring_packages = session.query(GroupPackage).join(Chat).filter(
                    and_(
                        # GroupPackage.is_paid == True,
                        # GroupPackage.package_end_date >= expiry_date_start,
                        GroupPackage.package_end_date <= expiry_date_end,
                        GroupPackage.package.in_([
                            ServicePackage.BASIC,
                            ServicePackage.STANDARD,
                            ServicePackage.BUSINESS
                        ])
                    )
                ).all()

                if expiring_packages:
                    force_log(f"Found {len(expiring_packages)} packages expiring in 3 days", "PackageExpiryScheduler")
                    # Send admin alert only
                    await self.send_admin_alert(expiring_packages)
                else:
                    force_log("No packages found expiring in 3 days", "PackageExpiryScheduler")

        except Exception as e:
            force_log(f"Error in notify_expiring_packages: {str(e)}", "PackageExpiryScheduler", "ERROR")

    async def send_admin_alert(self, expiring_packages):
        """
        Send an alert to the admin group about packages expiring in 3 days
        
        Args:
            expiring_packages: List of GroupPackage objects that are expiring
        """
        if not self.admin_bot_service or not expiring_packages:
            return
            
        try:
            # Create admin alert message
            current_time = DateUtils.now().strftime("%Y-%m-%d %H:%M")
            
            admin_message = f" 🚨ADMIN ALERT - Package Expiry Notifications 🚨\n\n"
            admin_message += f" 📅Alert Time: {current_time} (Cambodia Time)\n"
            admin_message += f" ⚠️Packages expiring in 3 days: {len(expiring_packages)}\n\n"
            admin_message += " 📋Details:\n"
            
            for i, group_package in enumerate(expiring_packages, 1):
                chat_group = group_package.chat_group
                if not chat_group.is_active:
                    continue
                expiry_date_str = group_package.package_end_date.strftime("%Y-%m-%d %H:%M")
                group_name = chat_group.group_name if chat_group else "Unknown Group"
                
                admin_message += f"{i}. {group_name}\n"
                admin_message += f"   📊 Package: {group_package.package.value}\n"
                admin_message += f"   🆔 Chat ID: {chat_group.chat_id}\n"
                admin_message += f"   ⏰ Expires: {expiry_date_str}\n"
                admin_message += f"   💰 Amount Paid: ${group_package.amount_paid or 'N/A'}\n\n"
                
                # Limit message length to avoid Telegram limits
                if len(admin_message) > 3500:  # Leave room for closing message
                    admin_message += f"... and {len(expiring_packages) - i} more packages\n\n"
                    break
            
            admin_message += "🔔 Action Required:\n"
            admin_message += "• Follow up with customers for renewals\n"
            admin_message += "• Prepare for potential downgrades if not renewed\n"
            admin_message += "• Monitor payment notifications\n\n"
            admin_message += "📊 Generated by Package Expiry Scheduler"
            
            # Send admin alert
            success = await self.admin_bot_service.send_message(self.admin_group_id, admin_message)
            
            if success:
                force_log(f"Successfully sent admin alert for {len(expiring_packages)} expiring packages", "PackageExpiryScheduler")
            else:
                force_log("Failed to send admin alert", "PackageExpiryScheduler", "WARN")
                
        except Exception as e:
            force_log(f"Error sending admin alert: {str(e)}", "PackageExpiryScheduler", "ERROR")

    async def update_expired_packages_to_free(self):
        """
        Find packages that have expired (end date < today) and update them to FREE package.
        """
        force_log("Package Expiry Scheduler - Checking for expired packages to update to FREE", "PackageExpiryScheduler")
        try:
            with get_db_session() as session:
                # Get current time in Cambodia timezone
                current_time = DateUtils.now()

                # Find packages that have expired (not FREE packages)
                expired_packages = session.query(GroupPackage).join(Chat).filter(
                    and_(
                        GroupPackage.package_end_date < current_time,
                        GroupPackage.package.in_([
                            ServicePackage.BASIC,
                            ServicePackage.STANDARD,
                            ServicePackage.BUSINESS
                        ])
                    )
                ).all()

                if not expired_packages:
                    force_log("No expired packages found to update", "PackageExpiryScheduler")
                    return

                updated_count = 0
                for group_package in expired_packages:
                    try:
                        old_package = group_package.package.value
                        chat_group = group_package.chat_group

                        # Update package to FREE
                        group_package.package = ServicePackage.FREE
                        group_package.is_paid = False

                        session.commit()
                        updated_count += 1

                        group_name = chat_group.group_name if chat_group else "Unknown Group"
                        force_log(
                            f"Updated expired package to FREE - Group: {group_name} (ID: {chat_group.chat_id}), "
                            f"Old Package: {old_package}, "
                            f"Expired: {group_package.package_end_date.strftime('%Y-%m-%d %H:%M')}",
                            "PackageExpiryScheduler"
                        )

                    except Exception as e:
                        session.rollback()
                        force_log(
                            f"Failed to update package {group_package.id} to FREE: {str(e)}",
                            "PackageExpiryScheduler",
                            "ERROR"
                        )

                force_log(
                    f"Updated {updated_count} out of {len(expired_packages)} expired packages to FREE",
                    "PackageExpiryScheduler"
                )

        except Exception as e:
            force_log(f"Error in update_expired_packages_to_free: {str(e)}", "PackageExpiryScheduler", "ERROR")

    async def start_scheduler(self):
        """
        Start the scheduler to run the package expiry notification job.
        """
        # Schedule the job to run daily at 10:00 AM Cambodia time
        cambodia_tz = pytz.timezone('Asia/Phnom_Penh')
        schedule.every().day.at("13:10", tz=cambodia_tz).do(
            lambda: asyncio.create_task(self.notify_expiring_packages())
        )

        # Schedule the expired package update job to run daily at 11:00 AM Cambodia time
        schedule.every().day.at("13:20", tz=cambodia_tz).do(
            lambda: asyncio.create_task(self.update_expired_packages_to_free())
        )

        force_log("Package expiry scheduler started. Jobs will run daily:", "PackageExpiryScheduler")
        force_log("  - 10:00 AM: Notify packages expiring in 3 days", "PackageExpiryScheduler")
        force_log("  - 01:00 PM: Update expired packages to FREE", "PackageExpiryScheduler")

        try:
            while True:
                schedule.run_pending()
                await asyncio.sleep(60)  # Check every minute
        except KeyboardInterrupt:
            force_log("Package expiry scheduler stopped by user", "PackageExpiryScheduler")
        except Exception as e:
            force_log(f"Error in scheduler: {str(e)}", "PackageExpiryScheduler", "ERROR")